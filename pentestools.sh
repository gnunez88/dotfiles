#!/bin/bash

# Tools

## APT

APT_TOOLS_GENERAL=(
    7z  # Archive (de)compressor
    amass  # OSINT information gathering tool
    cryptcat  # Low-level networking tool
    exploitdb  # Collection of exploits and a tool to search them (searchsploit)
    dig  # DNS client tool
    gcc  # GNU C Compiler
    git  # Versioning controller tool
    hashcat  # Offline Hash cracker
    hashid  # Hash identifier
    hash-identifier  # Hash identifier
    hydra  # Online Service bruteforcer
    impacket-scripts  # Powerful Windows attacking set of tools
    john  # Offline Hash cracker
    jq  # JSON parser tool
    keepassxc  # Password Manager
    medusa  # Online Service bruteforcer
    ncat  # Low-level networking tool (Nmap)
    ncrack  # Online Service bruteforcer (Nmap)
    nmap  # Network MAPper
    nodejs  # JavaScript Server-Side Interpreter engine
    nodejs-doc  # Node.js documentation
    onesixtyone  # SNMP pentesting tool
    openssl  # Criptographic utility
    powershell  # PowerShell Core (shell scripting language)
    proxychains4  # Chaining proxies
    pry  # Enhanced Ruby interactive interpreter
    pwncat  # Low-level networking tool
    python3  # Powerful scripting programming language
    python3-ipython  # Enhanced Python3 interactive interpreter
    python3-pip  # Python3 package manager
    python3-virtualenv  # Python (2 and 3) virtual environment creator
    rdate  # Date synchroniser (to test Kerberos)
    ruby  # Powerful scripting programming language
    seclists  # Security related dictionaries
    socat  # Low-level networking tool
    tcpdump  # CLI network packet sniffer
    tshark  # CLI version of WireShark (network packet sniffer)
    vim  # Best CLI text editor ever
    wireshark-qt  # WireShark (graphical network packet sniffer)
    xq  # XML parser tool
    zip  # Archive (de)compressor
)

APT_TOOLS_WEB=(
    burpsuite  # Powerful Graphical HTTP Intercepting Proxy
    chromium  # Web browser
    curl  # cURL HTTP(S)/FTP CLI client
    firefox-esr  # Mozilla Web browser
    ffuf  # HTTP/S Fuzzer
    html2text  # Parser from HTML to text (interpreting the HTML tags like a web browser)
    wget  # HTTP(S)/FTP CLI client
    whatweb  # Web enumerating tool
    zaproxy  # Powerful Graphical HTTP Intercepting Proxy
)

APT_TOOLS_AD=(
    bloodhound  # LDAP data collector
    neo4j  # Graph database to use along with BloodHound 
)

APT_TOOLS_BINEXP=(
    checksec  # Binary security checker
    gdb  # GNU Debugger
    ltrace  # 
    binutils  # Binary utilities: objdump
    ptrace  # 
    strace  # 
)

APT_TOOLS_DB=(
    libxml-xpath-perl  # XPath query tool (xpath)
    mariadb-client  # MariaDB/MySQL client
    postgresql-client-common  # PostgreSQL client (psql)
    sqsh  # MSSQL CLI client
    sqlite3  # SQLite client
    #redis-cli  # Redis client
)

APT_TOOLS_DEV=(
    docker.io  # Docker management tool
    docker-compose  # Docker-copmose deployment tool
    golang  # Go language utilities
    npm  # Node.js classic packet manager
    openjdk-11-jdk  # Java Development Kit
    openjdk-11-doc  # JDK documentation
)

APT_TOOLS_APK=(
    apktool  # Reverse engineering Android apk files tool
)

APT_TOOLS_REPORTING=(
    texlive  # 
    texlive-base  # 
    texlive-extra-utils  # 
    texlive-lang-spanish  # 
)

## PIP

PIP_TOOLS_GENERAL=(
    pipx  # Python package manager with isolation
    pwntools  # Pwn tools to improve pawning workflow
)

## PIPX

PIPX_TOOLS_AD=(
    CrackMapExec  # Powerful Windows attacking tool
)

## GEM

GEM_TOOLS_AD=(
    evil-winrm  # WinRM pseudo-interactive shell tool
)

## GitHub/GitLab

GITHUB_TOOLS_WEB=(
    gnunez88/urlencode  # URL(en|de)coder
)

# Functions
function get_tool_name () {
    TOOL_PATH="$1"
    TOOL_ROOT="$2"
    TOOL_NAME="$(grep -oP ""(?<=${TOOL_PATH}/)${TOOL_ROOT}(\.\S+)"")"
    echo "${TOOL_NAME}"
}

function install_apt_packages () {
    PACKAGES="$@"
    sudo apt install -y "${PACKAGES[@]}"
}

function install_pip_packages () {
    PACKAGES="$@"
    pip install "${PACKAGES[@]}"
}

function install_pipx_packages () {
    PACKAGES="$@"
    pipx install "${PACKAGES[@]}"
}

function install_gem_packages () {
    PACKAGES="$@"
    gem install "${PACKAGES[@]}"
}

function install_git_repos () {
    REPOS="$@"
    for REPO in "${REPOS[@]}"; do
        sudo git clone https://github.com/${REPO} /opt/${REPO}
        # Since the tool usually has the same name as the repository
        ## Removing the username part
        NAME="${REPO//*\//}"
        ## Getting the actual tool filename (with its extension)
        ## NOTE: This assumes the main script/binary has the same name as the repository
        TOOL=get_tool_name "/opt/${REPO}" "${NAME}"
        ## Linking the tool to the correct location within the PATH
        ## NOTE: When calling the tool it will not have the extension
        sudo ln -s "/opt/${REPO}/${TOOL}" "/usr/local/bin/${NAME}"
        ## Giving execution permission
        sudo chmod +x "/opt/${REPO}/${TOOL}"
    done
}

# Run
APT_SECTIONS=(
    ${APT_TOOLS_GENERAL[@]}
    ${APT_TOOLS_WEB[@]}
    ${APT_TOOLS_AD[@]}
    ${APT_TOOLS_BINEXP[@]}
    ${APT_TOOLS_DB[@]}
    ${APT_TOOLS_APK[@]}
    ${APT_TOOLS_REPORTING[@]}
)

PIP_SECTIONS=(
    ${PIP_TOOLS_GENERAL[@]}
)

PIPX_SECTIONS=(
    ${PIPX_TOOLS_AD[@]}
)

GEM_SECTIONS=(
    ${GEM_TOOLS_AD[@]}
)

GIT_SECTIONS=(
    ${GIT_TOOLS_WEB[@]}
)

## Updating the repositories' cache and upgrading the existing packages
sudo apt update
sudo apt upgrade -y

if command -v apt; then
    for APT_SECTION in ${APT_SECTIONS[@]}; do
        install_apt_packages "${APT_SECTION[@]}"
    done
fi

if command -v pip3; then
    for PIP_SECTION in ${PIP_SECTIONS[@]}; do
        install_pip_packages "${PIP_SECTION[@]}"
    done
fi

if command -v pipx; then
    for PIPX_SECTION in ${PIPX_SECTIONS[@]}; do
        install_pipx_packages "${PIPX_SECTION[@]}"
    done
fi

if command -v gem; then
    for GEM_SECTION in ${GEM_SECTIONS[@]}; do
        install_gem_packages "${GEM_SECTION[@]}"
    done
fi

if command -v git; then
    for GIT_SECTION in ${GIT_SECTIONS[@]}; do
        install_git_repos "${GIT_SECTION[@]}"
    done
fi

